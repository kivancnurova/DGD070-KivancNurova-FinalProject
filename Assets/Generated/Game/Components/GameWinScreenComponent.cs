//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public WinScreenComponent winScreen { get { return (WinScreenComponent)GetComponent(GameComponentsLookup.WinScreen); } }
    public bool hasWinScreen { get { return HasComponent(GameComponentsLookup.WinScreen); } }

    public void AddWinScreen(bool newIsVisible) {
        var index = GameComponentsLookup.WinScreen;
        var component = (WinScreenComponent)CreateComponent(index, typeof(WinScreenComponent));
        component.isVisible = newIsVisible;
        AddComponent(index, component);
    }

    public void ReplaceWinScreen(bool newIsVisible) {
        var index = GameComponentsLookup.WinScreen;
        var component = (WinScreenComponent)CreateComponent(index, typeof(WinScreenComponent));
        component.isVisible = newIsVisible;
        ReplaceComponent(index, component);
    }

    public void RemoveWinScreen() {
        RemoveComponent(GameComponentsLookup.WinScreen);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherWinScreen;

    public static Entitas.IMatcher<GameEntity> WinScreen {
        get {
            if (_matcherWinScreen == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.WinScreen);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherWinScreen = matcher;
            }

            return _matcherWinScreen;
        }
    }
}
